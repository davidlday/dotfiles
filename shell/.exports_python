#!/usr/bin/env bash
# Python

# virtualenvwrapper
if is-macos; then
  VIRTUALENVWRAPPER_SRC=/usr/local/bin/virtualenvwrapper_lazy.sh
  # READLINK=greadlink
else
  VIRTUALENVWRAPPER_SRC=/etc/bash_completion.d/virtualenvwrapper
  # READLINK=readlink
fi

if [ -r "${VIRTUALENVWRAPPER_SRC}" ]; then
  echo "Setting up virtualenvwrapper."
  # Which python to use
  # export VIRTUALENVWRAPPER_PYTHON="$(${READLINK} -f $(which python2))"
  # set where virutal environments will live
  export WORKON_HOME="${HOME}/.virtualenvs"
  # ensure all new environments are isolated from the site-packages directory
  export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--no-site-packages'
  # use the same directory for virtualenvs as virtualenvwrapper
  export PIP_VIRTUALENV_BASE="${WORKON_HOME}"
  # pip should only run if there is a virtualenv currently activated
  export PIP_REQUIRE_VIRTUALENV=true
  # Don't use site-wide packages
  export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--no-site-packages'
  # Default project directory
  export PROJECT_HOME="${HOME}/Projects"

  # shellcheck source=/dev/null
  source "${VIRTUALENVWRAPPER_SRC}"

  # Global Pip per http://hackercodex.com/guide/python-development-environment-on-mac-osx/

  gpip2(){
     PIP_REQUIRE_VIRTUALENV="" pip2 "$@"
  }

  gpip3(){
     PIP_REQUIRE_VIRTUALENV="" pip3 "$@"
  }

fi

unset READLINK
